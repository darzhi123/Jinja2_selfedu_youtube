Lesson N1.

Модуль Jinja2 -> используется для обработки шаблонов.

Команда для установки Jinja2: pip install Jinja2

Lesson N1.1:
from jinja2 import Template

name = 'Федор'

tm = Template('Привет {{ name }}') # создаем экземпляр класса Template модуля jinja2 на основе шаблона Привет {{ name }}
msg = tm.render(name=name)  # в шаблоне заменяем именованный параметр на представленный аргумент

print(msg) -> Привет Федор


Внутри шаблона можно писать:
1) {%%} => cпецификатор шаблона;
2) {{}} => выражение для вставки конструкций Python в шаблон;
3) {# #} => блок комментариев;
4) # ## => строковый комментарий.


Lesson N1.2:
from jinja2 import Template

name = 'Федор'
age = 28

tm = Template('Мне {{a}} лет и зовут {{n}}')
msg = tm.render(n=name, a=age) # аргументы передаются в виде словаря и из него выдаются и подставляются

print(msg) -> Мне 28 лет и зовут Федор

Проверка на конструкции Python: (Lesson N1.3)
from jinja2 import Template

name = 'Федор'
age = 28

tm = Template('Мне {{a*2}} лет и зовут {{n.upper()}}')
msg = tm.render(n=name, a=age) # аргументы передаются в виде словаря и из него выдаются и подставляются

print(msg) -> Мне 56 лет и зовут ФЕДОР

Для работы с классом: Lesson N1.4
from jinja2 import Template

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

n = 'Федор'
a = 28

per = Person(n, a)

tm = Template('Мне {{ age * 2 }} лет и зовут {{ name }}')
msg = tm.render(age=per.age, name = per.name)

print(msg) -> Мне 56 лет и зовут Федор

или же:

tm = Template('Мне {{ p.age * 2 }} лет и зовут {{ p.name }}')
msg = tm.render(p = per)

print(msg) -> Мне 56 лет и зовут Федор

или же:
from jinja2 import Template

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def getName(self):
        return self.name

    def getAge(self):
        return self.age


n = 'Федор'
a = 28

per = Person(n, a)

tm = Template('Мне {{ p.getAge() }} лет и зовут {{ p.getName() }}')
msg = tm.render(p=per)

print(msg) -> Мне 28 лет и зовут Федор


Lesson N2.
Start_code:
import jinja2

data = """Модуль Jinja2 вместо
определения {{ name }}
подставляет соответствующее значение"""

tm = jinja2.Template(data)
msg = tm.render(name='Илья')

print(msg) => Модуль Jinja2 вместо \n определения Илья \n подставляет соответствующее значение

Способы экранирования данных в строках:
Если нужно экранирование: создайте блок {%raw%} ... {%endraw%}
Пример:
import jinja2

data = """{%raw%}Модуль Jinja2 вместо
определения {{ name }}
подставляет соответствующее значение{%endraw%}"""

tm = jinja2.Template(data)
msg = tm.render(name='Илья')

print(msg) -> Модуль Jinja2 вместо \n определения {{ name }} \nподставляет соответствующее значение

Экранирование символов:
<a href='#'>Ссылка</a> => без тегов, просто клибалеьный текст Ссылка, ведущий на #
Если же ты хочешь теги из <a href='#'>Ссылка</a> в виде текста (в браузере), тебе придется этот текст экранировать.
link = """В HTML-документе ссылки определяются так:
<a href='#'>Ссылка</a>"""
Для этого, когда пишешь объект Template, в часть {{link}} добавляешь | и e (escape, экранирование).

from jinja2 import Template

link = """В HTML-документе ссылки определяются так:
<a href='#'>Ссылка</a>"""

tm = Template("{{ link | e }}")
msg = tm.render(link=link)

print(msg) ->&lt;a href=&#39;#&#39;&gt;Ссылка&lt;/a&gt; То есть экранируются специальные символы, которые браузер
воспринимает как теги