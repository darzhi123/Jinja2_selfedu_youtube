Lesson N1.

Модуль Jinja2 -> используется для обработки шаблонов.

Команда для установки Jinja2: pip install Jinja2

Lesson N1.1:
from jinja2 import Template

name = 'Федор'

tm = Template('Привет {{ name }}') # создаем экземпляр класса Template модуля jinja2 на основе шаблона Привет {{ name }}
msg = tm.render(name=name)  # в шаблоне заменяем именованный параметр на представленный аргумент

print(msg) -> Привет Федор


Внутри шаблона можно писать:
1) {%%} => cпецификатор шаблона;
2) {{}} => выражение для вставки конструкций Python в шаблон;
3) {# #} => блок комментариев;
4) # ## => строковый комментарий.


Lesson N1.2:
from jinja2 import Template

name = 'Федор'
age = 28

tm = Template('Мне {{a}} лет и зовут {{n}}')
msg = tm.render(n=name, a=age) # аргументы передаются в виде словаря и из него выдаются и подставляются

print(msg) -> Мне 28 лет и зовут Федор

Проверка на конструкции Python: (Lesson N1.3)
from jinja2 import Template

name = 'Федор'
age = 28

tm = Template('Мне {{a*2}} лет и зовут {{n.upper()}}')
msg = tm.render(n=name, a=age) # аргументы передаются в виде словаря и из него выдаются и подставляются

print(msg) -> Мне 56 лет и зовут ФЕДОР

Для работы с классом: Lesson N1.4
from jinja2 import Template

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

n = 'Федор'
a = 28

per = Person(n, a)

tm = Template('Мне {{ age * 2 }} лет и зовут {{ name }}')
msg = tm.render(age=per.age, name = per.name)

print(msg) -> Мне 56 лет и зовут Федор

или же:

tm = Template('Мне {{ p.age * 2 }} лет и зовут {{ p.name }}')
msg = tm.render(p = per)

print(msg) -> Мне 56 лет и зовут Федор

или же:
from jinja2 import Template

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def getName(self):
        return self.name

    def getAge(self):
        return self.age


n = 'Федор'
a = 28

per = Person(n, a)

tm = Template('Мне {{ p.getAge() }} лет и зовут {{ p.getName() }}')
msg = tm.render(p=per)

print(msg) -> Мне 28 лет и зовут Федор


Lesson N2.
Start_code:
import jinja2

data = """Модуль Jinja2 вместо
определения {{ name }}
подставляет соответствующее значение"""

tm = jinja2.Template(data)
msg = tm.render(name='Илья')

print(msg) => Модуль Jinja2 вместо \n определения Илья \n подставляет соответствующее значение

Способы экранирования данных в строках:
Если нужно экранирование: создайте блок {%raw%} ... {%endraw%}
Пример:
import jinja2

data = """{%raw%}Модуль Jinja2 вместо
определения {{ name }}
подставляет соответствующее значение{%endraw%}"""

tm = jinja2.Template(data)
msg = tm.render(name='Илья')

print(msg) -> Модуль Jinja2 вместо \n определения {{ name }} \nподставляет соответствующее значение

Экранирование символов:
<a href='#'>Ссылка</a> => без тегов, просто клибалеьный текст Ссылка, ведущий на #
Если же ты хочешь теги из <a href='#'>Ссылка</a> в виде текста (в браузере), тебе придется этот текст экранировать.
link = """В HTML-документе ссылки определяются так:
<a href='#'>Ссылка</a>"""
Для этого, когда пишешь объект Template, в часть {{link}} добавляешь | и фильтр e (escape, экранирование).

from jinja2 import Template

link = """В HTML-документе ссылки определяются так:
<a href='#'>Ссылка</a>"""

tm = Template("{{ link | e }}")
msg = tm.render(link=link)

print(msg) ->&lt;a href=&#39;#&#39;&gt;Ссылка&lt;/a&gt; То есть экранируются специальные символы, которые браузер
воспринимает как теги. То в веб-браузере вместо текста
В HTML-документе ссылки определяются так: Ссылка, будет
В HTML-документе ссылки определяются так: <a href='#'>Ссылка</a>

Выражение for:
Блок for позволяет создавать список на основе любого итерируемого объекта. Его архитектура:
{% for <выражение>-%}
    <повторяемый фрагмент>
{% endfor %}

from jinja2 import Template

cities = [{'id': 1, 'city': 'Москва'},
          {'id': 5, 'city': 'Тверь'},
          {'id': 7, 'city': 'Минск'},
          {'id': 8, 'city': 'Смоленск'},
          {'id': 11, 'city': 'Калуга'}]

link = '''<select name="cities">
{% for c in cities %}
    <option value="{{c['id']}}">{{c['city']}}</option>
{% endfor %}
<select>'''

tm = Template(link)
msg = tm.render(cities = cities)

print(msg)

если ставить минус перед закрывающей % или после открывающей % в цикле for - можно убрать переносы строк.


Блок для проверки условий (if):
Архитектура if:
{% if <условие> %}
    <фрагмент при истинности условия>
{% endif %}

Вставка в прошлый код:
link = '''<select name="cities">
{%- for c in cities -%}
{%- if c.id > 6 -%}}   ###################################
    <option value="{{c['id']}}">{{c['city']}}</option>
{%- endif -%} #######################################3
{% endfor %}
<select>'''

Конструкция else:
{ % else -%}
    <код для else>
Конструкция elif:
{% elif <условие> %}
    <код>

Lesson N3: Фильтры и макросы macro, call

Фильтр sum - вычисляет сумму поля коррекции

from jinja2 import Template

cars = [{'model': 'Ауди', 'price': 23_000},
          {'model': "Шкода", 'price': 17_300},
          {'model': "Вольво", 'price': 44_300},
          {'model': "Фольксваген", 'price': 21_300}
          ]

tpl = "Суммарная цена автомобилей {{ cs | sum(attribute = 'price') }}"
tm = Template(tpl)
msg = tm.render(cs = cars)

print(msg) -> Суммарная цена автомобилей 105900
В коде выше мы указываем коллекцию, для которой вызывается фильтр, | (разделитель между указыванием вставочных
материалов и фильтрами) и фильтр sum, в котором выдаем аттрибут для суммирования('price')

То есть синтаксис фильтра sum такой:
sum(iterable, attribute = None, start=0), где sum является фильтром, iterable = обычно не прописывается, так как пишется
внутри шаблона, start является прибавкой к сумме, если необходимо, attribute = именнованный параметр, если нужно.

tpl = "Суммарная цена автомобилей {{ cs | sum(attribute='price', start=20_000) }}"
tm = Template(tpl)
msg = tm.render(cs = cars)

print(msg) -> Суммарная цена автомобилей 125900

Пример работы фильтра sum с списком чисел:
digs = [1, 2, 3, 4, 5]
tpl = "Суммарная цена автомобилей {{ cs | sum }}"
tm = Template(tpl)
msg = tm.render(cs = digs)

print(msg) -> 15

#####################################################################################################################
список всех фильтров в оф документации
#####################################################################################################################

Фильтры можно применять и внутри шаблонов по следующей конструкции:
{{% filter <название фильтра> %}
<фрагмент для применения фильтра>
{% endfilter %}

Пример использования:

from jinja2 import Template
from pprint import pprint

persons = [
    {'name': 'Алексей', 'old': 18, 'weight': 78.5},
    {'name': 'Николай', 'old': 28, 'weight': 82.3},
    {'name': 'Иван', 'old': 33, 'weight': 94.0}
]

tpl = '''
{%- for user in users -%}
{%- filter upper() %}{{user.name}}{% endfilter %}
{% endfor -%}
'''

tm = Template(tpl)
msg = tm.render(users=persons)

print(msg) => АЛЕКСЕЙ\nНИКОЛАЙ\nИВАН\n

Макроопределение для шаблонов:
DRY - Don't repeat yourself (не повторяйся

Макрос в Jinja2 примерно как функция.
В шаблонах Jinja2 макросы определяются тегами {% macro ... %}{% endmacro %}.
Они полезны для того, чтобы поместить часто используемые идиомы в многоразовые функции, чтобы не повторяться.

Пример:
from jinja2 import Template

html = '''
{%- macro input(name, value='', type='text', size=20) -%}
    <input type = "{{ type }}" name = "{{ name }}" value = "{{ value | e }}" size = "{{ size }}">
{%- endmacro -%}
<p>{{ input('username') }}</p>
<p>{{ input('email') }}</p>
<p>{{ input('password') }}</p>
'''

tm = Template(html)
msg = tm.render()

print(msg)
то есть в мсг будет msg => <p><input type = "text" name = "username" value = "" size = "20"></p>  \n
<p><input type = "text" name = "email" value = "" size = "20"></p>  \n
<p><input type = "text" name = "password" value = "" size = "20"></p>  \n

Вложенные макросы (call):
call - специальное определение, которое позволяет создавать вложенные макросы.
Архитектура call:
{% call[(параметры)] <вызов макроса> %}
<вложенный шаблон>
{% endcall %}

Архитектура в примере ниже следующая:
{% macro list_users(list_of_user) -%}
<ul>
{% for u in users -%}
    <li>{{u.name}} {{caller(u)}}
{%- endfor %}}
</ul>
{% endmacro %}

и после этого прописываем caller:
{% call(user) list_users(users) %}
    <ul>
    <li>age: {{user.age}}
    <li>weight: {{user.weight}}
    <\ul>
{% endcall -%}

Пример:
from jinja2 import Template

persons = [
    {'name': 'Алексей', 'old': 18, 'weight': 78.5},
    {'name': 'Николай', 'old': 28, 'weight': 82.3},
    {'name': 'Иван', 'old': 33, 'weight': 94.0}
]

html = '''
{% macro list_users(list_of_user) -%}
<ul>
{% for u in list_of_user -%}
    <li>{{u.name}} {{caller(u)}}
{%- endfor %}
</ul>
{%- endmacro %}

{% call(user) list_users(users) %}
    <ul>
    <li>age: {{user.old}}
    <li>weight: {{user.weight}}
    </ul>
{% endcall -%}
'''

tm = Template(html)
msg = tm.render(users=persons)

print(msg)
то msg:
<ul>
<li>Алексей
    <ul>
    <li>age: 18
    <li>weight: 78.5
    </ul>
<li>Николай
    <ul>
    <li>age: 28
    <li>weight: 82.3
    </ul>
<li>Иван
    <ul>
    <li>age: 33
    <li>weight: 94.0
    </ul>
</ul>

Lesson N4. FileSystemLoader, PackageLoader, DictLoader, FunctionLoader
Что работать с html-ками из других мест и папок, пользуемся FileSystemLoader и Enviromment.
Допустим, в одной директории с вашим .py находится папка с html-кодом, к примеру - папка traindir и файл main.htm

main.htm:
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <base href="https://proproprogs.ru/">
    <title>Про программирование</title>
</head>
<body>

<ul>
{% for u in users -%}
    <li>{{u.name}}
{% endfor -%}
</ul>

</body>
</html>

То:
from jinja2 import Environment, FileSystemLoader # берем

persons = [
    {'name': 'Алексей', 'old': 18, 'weight': 78.5},
    {'name': 'Николай', 'old': 28, 'weight': 82.3},
    {'name': 'Иван', 'old': 33, 'weight': 94.0}
]

file_loader = FileSystemLoader('traindir')   #Открывает папку traindir
env = Environment(loader=file_loader)    #Как-бы переходит в эту папку, указанную выше

tm = env.get_template('main.htm')  #В этой папке открывает файл с заданным названием и делает ее классом Template
msg = tm.render(users=persons)  # Выдает str-type HTML-code с исполненным кодом

print(msg)::::::
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <base href="https://proproprogs.ru/">
    <title>Про программирование</title>
</head>
<body>

<ul>
<li>Алексей
<li>Николай
<li>Иван
</ul>

</body>
</html>

Вместо FileSystemLoader можно использовать:
PackageLoader => для загрузки шаблонов из пакета;
DictLoader => для загрузки шаблонов из словаря;
FunctionLoader => для загрузки на основе функции;
PrefixLoader => загрузчик, использующий словарь для построения подкаталогов;
ChoiceLoader => загрузчик, содержащий список других загрузчиков (если один не сработает, выбирается другой);
ModuleLoader => загрузчик для скомпилированных шаблонов.